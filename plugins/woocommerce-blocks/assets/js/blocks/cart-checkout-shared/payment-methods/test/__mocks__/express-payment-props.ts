// This is the shape of the API exposed to the express payment methods via props
// Note that this is a public API!
export const getExpectedExpressPaymentProps = ( name: string ) => ( {
	activePaymentMethod: undefined,
	billing: {
		appliedCoupons: [],
		billingAddress: {
			address_1: '',
			address_2: '',
			city: '',
			company: '',
			country: '',
			first_name: '',
			last_name: '',
			phone: '',
			postcode: '',
			state: '',
		},
		billingData: {
			address_1: '',
			address_2: '',
			city: '',
			company: '',
			country: '',
			first_name: '',
			last_name: '',
			phone: '',
			postcode: '',
			state: '',
		},
		cartTotal: {
			label: 'Total',
			value: 0,
		},
		cartTotalItems: [
			{
				key: 'total_items',
				label: 'Subtotal:',
				value: 0,
				valueWithTax: 0,
			},
			{
				key: 'total_fees',
				label: 'Fees:',
				value: 0,
				valueWithTax: 0,
			},
			{
				key: 'total_discount',
				label: 'Discount:',
				value: 0,
				valueWithTax: 0,
			},
			{
				key: 'total_tax',
				label: 'Taxes:',
				value: 0,
				valueWithTax: 0,
			},
			{
				key: 'total_shipping',
				label: 'Shipping:',
				value: 0,
				valueWithTax: 0,
			},
		],
		currency: {
			code: 'USD',
			decimalSeparator: '.',
			minorUnit: 2,
			prefix: '&#36;',
			suffix: '',
			symbol: '&#36;',
			thousandSeparator: ',',
		},
		customerId: 1,
		displayPricesIncludingTax: false,
	},
	buttonAttributes: {
		borderRadius: '4',
		height: '48',
	},
	cartData: {
		cartFees: [],
		cartItems: [],
		extensions: {},
	},
	checkoutStatus: {
		isCalculating: false,
		isComplete: false,
		isIdle: true,
		isProcessing: false,
	},
	components: {
		LoadingMask: expect.any( Function ),
		PaymentMethodIcons: expect.any( Function ),
		PaymentMethodLabel: expect.any( Function ),
		ValidationInputError: expect.any( Function ),
	},
	emitResponse: {
		noticeContexts: {
			BILLING_ADDRESS: 'wc/checkout/billing-address',
			CART: 'wc/cart',
			CHECKOUT: 'wc/checkout',
			CHECKOUT_ACTIONS: 'wc/checkout/checkout-actions',
			CONTACT_INFORMATION: 'wc/checkout/contact-information',
			EXPRESS_PAYMENTS: 'wc/checkout/express-payments',
			ORDER_INFORMATION: 'wc/checkout/additional-information',
			PAYMENTS: 'wc/checkout/payments',
			SHIPPING_ADDRESS: 'wc/checkout/shipping-address',
			SHIPPING_METHODS: 'wc/checkout/shipping-methods',
		},
		responseTypes: {
			ERROR: 'error',
			FAIL: 'failure',
			SUCCESS: 'success',
		},
	},
	eventRegistration: {
		onCheckoutAfterProcessingWithError: expect.any( Function ),
		onCheckoutAfterProcessingWithSuccess: expect.any( Function ),
		onCheckoutBeforeProcessing: expect.any( Function ),
		onCheckoutFail: expect.any( Function ),
		onCheckoutSuccess: expect.any( Function ),
		onCheckoutValidation: expect.any( Function ),
		onCheckoutValidationBeforeProcessing: expect.any( Function ),
		onPaymentProcessing: expect.any( Function ),
		onPaymentSetup: expect.any( Function ),
		onShippingRateFail: expect.any( Function ),
		onShippingRateSelectFail: expect.any( Function ),
		onShippingRateSelectSuccess: expect.any( Function ),
		onShippingRateSuccess: expect.any( Function ),
	},
	name,
	onClick: expect.any( Function ),
	onClose: expect.any( Function ),
	onError: expect.any( Function ),
	onSubmit: expect.any( Function ),
	paymentStatus: {
		hasError: false,
		hasFailed: false,
		isDoingExpressPayment: false,
		isFinished: false,
		isIdle: true,
		isPristine: true,
		isProcessing: false,
		isReady: false,
		isStarted: false,
		isSuccessful: false,
	},
	setExpressPaymentError: expect.any( Function ),
	shippingData: {
		isSelectingRate: false,
		needsShipping: true,
		selectedRates: {},
		setSelectedRates: expect.any( Function ),
		setShippingAddress: expect.any( Function ),
		shippingAddress: {
			address_1: '',
			address_2: '',
			city: '',
			company: '',
			country: '',
			first_name: '',
			last_name: '',
			phone: '',
			postcode: '',
			state: '',
		},
		shippingRates: [],
		shippingRatesLoading: false,
	},
	shippingStatus: {
		shippingErrorStatus: {
			hasError: false,
			hasInvalidAddress: false,
			isPristine: true,
			isValid: false,
		},
		shippingErrorTypes: {
			INVALID_ADDRESS: 'invalid_address',
			NONE: 'none',
			UNKNOWN: 'unknown_error',
		},
	},
	shouldSavePayment: false,
} );
